# -*- ispell-local-dictionary: "brasileiro"; -*-
#+TITLE: Um pouco sobre GDB
#+AUTHOR: Darlan Cavalcante Moreira
#+DATE: Julho, 2022

#+OPTIONS: toc:1 num:nil timestamp:nil tags:nil
#+COLUMNS: %40ITEM %CUSTOM_ID %reveal_data_state %reveal_extra_attr

:MY-REVEAL-EXPORT-OPTIONS:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_THEME: serif

#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_MIN_SCALE:1
#+REVEAL_INIT_OPTIONS: margin: 0.0, width: 1777, height: 1000,
#+REVEAL_INIT_OPTIONS: slideNumber: "c/t", transition: 'slide', transitionSpeed: "fast", history: false, hash: true, respondToHashChanges: true
#+REVEAL_PLUGINS: (highlight notes zoom search)
#+REVEAL_EXTERNAL_PLUGINS: (plugin1 . "ex/plugin1.js")
#+REVEAL_TITLE_SLIDE: <h1 class="title">%t</h1><h2>%s</h2></br></br></br><h3 class="author">%a</h3><h4 class="date">%d</h4>
#+HTML_HEAD_EXTRA: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/a11y-dark.min.css">
#+HTML_HEAD_EXTRA: <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js"></script>
#+REVEAL_EXTRA_CSS: css/code_blocks.css
#+REVEAL_EXTRA_CSS: css/kbd.css
#+REVEAL_EXTRA_CSS: css/beamer_like_blocks.css
#+REVEAL_TITLE_SLIDE_STATE: presentation-title-slide
#+REVEAL_TOC_SLIDE_BACKGROUND: ./images/table-of-contents.jpg
#+REVEAL_TOC_SLIDE_BACKGROUND_OPACITY: 0.1
#+MACRO: frag (eval (concat "@@html:<span class=\"fragment\">@@" $1 "@@html:</span>@@"))
#+MACRO: kbd (eval (concat "@@html:<kbd>@@" $1 "@@html:</kbd>@@"))


#+REVEAL_EXTRA_CSS: css/presentation.css
#+REVEAL_EXTRA_CSS: css/my_remark_main.css


:END:


* TODO Criar a class "dica" para um slide                                   :noexport:

Use
: :reveal_extra_attr: class="dica"
para atribuir a classe a um slide


* Bla bla                                                                  :noexport:
:PROPERTIES:
:REVEAL_DATA_STATE: session-separation-slide
:END:
REVEAL_SPEED: fast
REVEAL_MARGIN: 0.05
REVEAL_INIT_OPTIONS: reveal_width:1188 reveal_height:840
# A4 dimensions: 210 297 -> Vou usar 4 x esses valores
REVEAL_INIT_OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:nil
REVEAL_INIT_OPTIONS: reveal_slide_number:c/t

* Navegando nessa apresentação
** Básico do [[https://revealjs.com/][reveal.js]]
:PROPERTIES:
:CUSTOM_ID: basico-do-revealjs
:END:
#+ATTR_REVEAL: :frag (t)
- No reveal.js os slides são organizados em um grid 2D
  - Temos slides verticais e horizontais → tente {{{kbd(Esc)}}}
- Use {{{kbd(Space)}}} para passar para o próximo slide
- Use {{{kbd(Shift)}}} + {{{kbd(Space)}}} para voltar um slide
- É possível fazer uma busca em toda a apresentação com {{{kbd(Ctrl)}}} + {{{kbd(Shift)}}} + {{{kbd(f)}}}
* Vamos ao básico
:PROPERTIES:
:CUSTOM_ID: basico-do-gdb
:REVEAL_DATA_STATE: session-separation-slide
:END:
** Inicializando o GDB
:PROPERTIES:
:CUSTOM_ID:       inicializando-gdb
:REVEAL_DATA_STATE:
:END:

- Para executar o gdb basta usar o comando abaixo no terminal
  #+begin_src bash
  gdb <executável>
  #+end_src
#+ATTR_REVEAL: :frag t
- O terminal muda para o prompt do gdb, onde diversos comandos estão disponíveis

  [[./images/gdb-screen.png]]

** TUI
:PROPERTIES:
:CUSTOM_ID: tui
:END:

  #+ATTR_REVEAL: :frag (none t t t) :frag_idx (0 1 1 1)
- O GDB também possui uma interface de usuário em modo texto
- Use {{{kbd(Ctrl)}}}+{{{kbd(x)}}} {{{kbd(A)}}} para alternar entre a interface TUI e a interface normal
- Use {{{kbd(Ctrl)}}}+{{{kbd(x)}}} {{{kbd(2)}}} para dividir a tela
- Use {{{kbd(Ctrl)}}}+{{{kbd(x)}}} {{{kbd(1)}}} para voltar para uma única tela


#+ATTR_HTML: :class r-stretch
[[./images/gdb_tui.png]]

** Front-ends para GDB
:PROPERTIES:
:CUSTOM_ID: other-frontends
:END:
#+ATTR_REVEAL: :frag (none t) :frag_idx (0 1)
- Há vários front-ends para o GDB
  - [[https://github.com/cs01/gdbgui/][gdbgui]]
  - [[https://github.com/epasveer/seer][seer]]
  - [[https://github.com/rohanrhu/gdb-frontend][gdb-frontend]]
  - etc.
- Provavelmente sua IDE ou editor de texto (no Linux) usa o GDB
  - [[https://www.jetbrains.com/clion/][CLion]]
  - [[https://www.kdevelop.org/][KDevelop]]
  - [[https://code.visualstudio.com/][VSCode]]
  - [[https://www.gnu.org/software/emacs/][Emacs]]

** Comandos principais do GDB
:PROPERTIES:
:CUSTOM_ID: comandos-principais
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

- Alguns dos comandos principais do gdb são

# # box moody
# #+ATTR_REVEAL: :frag (t)
# - Muitos outros comandos estão disponíveis
#    # box happy
# - Você não precisa digitar o comando completo
#     #+ATTR_REVEAL: :frag t
#   - Uma ou duas letras são suficientes
#   - =b= para break, =c= para continue, etc


#+begin_src bash
file                                 # Seta o arquivo a ser debugado (caso já não tenha sido passado)
set args <command_line_parameters>   # Seta os parâmetros de linha de comando do programa
start                                # Inicia o programa a ser debugado parando na main
run, r                               # Roda o programa a ser debugado
backtrace, bt                        # Imprime o backtrace
frame, f                             # Seleciona ou imprime o frame stack
next, n                              # Avança uma linha no arquivo atual
step, s                              # Avança até a próxima linha de código
until                                # Avança até a linha especificada
finish, fin                          # Executa o programa até o frame atual retornar (acabar a função atual)
up, u                                # Seleciona e imprime o stack frame que chamou o atual
down, d                              # Seleciona e imprime o stack frame chamado pelo atual
break, b                             # Seta um breakpoint
rbreak, rb                           # Seta um breakpoint usando expressão regular
ignore                               # Ignore um breakpoint um certo número de vezes
continue, c                          # Continua execução do programa
info <break/threads/locals/args/etc> # Mostra informações do programa sendo debugado
help, h                              # Ajuda sobre os comandos
#+end_src


** Dica
:PROPERTIES:
:CUSTOM_ID: comandos-gdb-dica
:REVEAL_DATA_STATE: dica-slide
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

\\

Você não precisa digitar o comando completo

Uma ou duas letras são suficientes

=b= para break, =c= para continue, etc

** Criando breakpoints
:PROPERTIES:
:CUSTOM_ID: criando-breakpoints
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (t)
- É possível adicionar breakpoints com

  #+begin_src bash
  b line_number                # adiciona breakpoint na linha especificada no arquivo atual
  b function_name              # adiciona breakpoint no início da função especificada
  b filename.cpp:line_number   # Adiciona breakpoint especificando a linha e o arquivo
  #+end_src

- Para templates o nome da função deve incluir o tipo do template
- No caso da função abaixo
  #+begin_src c++
  template <typename T>
  inline T doubleInput(const T& x) {
      return 2 * x;
  }
  #+end_src
  é necessário =b doubleInput<int>=, ou =b doubleInput<double>=
  - Note que ele vai parar apenas na instância específica do template

- Caso use =b filename.cpp:line_number= em um template o gdb cria um breakpoint com
  múltiplas localizações (uma para cada instância do template)

** Criando breakpoints
:PROPERTIES:
:CUSTOM_ID: criando-breakpoints2
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (none t t) :frag_idx (0 1 2)
- Outra opção é usar o comando =rbreak= para criar um breakpoint passando uma expressão regular
  - Especialmente útil no caso de templates
- Com =rbreak doubleInput*= o gdb cria um breakpoint em todas as instâncias do template

  #+begin_src c++
  template <typename T>
  inline T doubleInput(const T& x) {
      return 2 * x;
  }
  #+end_src

- Outra opção interessante é =rbreak filename.cpp:.*= para adicionar um breakpoint em
  todas as funções de um arquivo

* Configurando o gdb
:PROPERTIES:
:CUSTOM_ID: configuracoes-interessantes
:REVEAL_DATA_STATE: session-separation-slide
:END:
** Evitando ver arquivos desinteressantes
:PROPERTIES:
:CUSTOM_ID: skip-files
:END:

#+ATTR_REVEAL: :frag (t)
- O comando =step= executa a próxima instrução
  - entra em outras funções
- Normalmente só estamos interessados no código do nosso programa
- Podemos pedir para o gdb pular arquivos desinteressantes
  - Arquivos no namespace std, ou outro de uma biblioteca externa
- Para isso usamos o comando =skip=
  #+begin_src text
  skip file
  skip function
  #+end_src
- *Dica*: podemos todas as funções em um namespace com
  #+begin_src bash
  skip -rfu ^std::
  #+end_src

** .gdbinit (global)
:PROPERTIES:
:CUSTOM_ID: gdbinit-global
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (t t) :frag_idx (1 2)
- É possível configurar o gdb usando um arquivo =.gdbinit= na sua home
- Configuração mínima útil

  #+begin_src text
  set history save on
  set print pretty on
  set pagination off
  set confirm off

  skip -rfu ^std::
  skip ...                                                    # Coloque outros que costuma ignorar

  set auto-load local-gdbinit on                              # Permite carregar arquivos .gdbinit locais
  add-auto-load-safe-path /some_path/with/local_gdbinit_file/ # Uma pasta contendo um arquivo .gdbinit local
  #+end_src


** Dica
:PROPERTIES:
:CUSTOM_ID: gdb-global-dica
:REVEAL_DATA_STATE: dica-slide
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

\\

=.gdbinit= na sua home também tem efeito quando o gdb é usado com algum front-end

** .gdbinit (local)
:PROPERTIES:
:CUSTOM_ID: gdbinit-local
:END:

#+ATTR_REVEAL: :frag (t)
- Também é possível ter um arquivo =.gdbinit= por projeto
  #+ATTR_REVEAL: :frag t
  - Na verdade por pasta
- Ele é carregado além do =.gdbinit= global
- *Exemplo*: Coloque o conteúdo abaixo em um arquivo =.gdbinit= na mesma pasta contendo
  seu programa

  #+begin_src gdb-script
  file seu_executavel
  start
  b main.cpp:11
  run
  #+end_src

- Devido a questões de segurança é necessário adicionar a linha abaixo no arquivo =.gdbinit= na sua home

  #+begin_src gdb-script
  set auto-load local-gdbinit on
  add-auto-load-safe-path /path_da_pasta_onde_esta_o_outro_gdb_init/
  #+end_src

* Truques úteis
:PROPERTIES:
:CUSTOM_ID: truques-uteis
:REVEAL_DATA_STATE: session-separation-slide
:END:
** Breakpoint Commands
:PROPERTIES:
:CUSTOM_ID: breakpoint-commands
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (t)
- São comandos executados ao atingir um breakpoint específico
- Qualquer comando do gdb pode ser executado dessa forma
  - Até mesmo =run= para recomeçar a execução do programa

- Para adicionar comandos use
    #+begin_src gdb-script
    commands <número do breakpoint>
    > algum comando
    > outro comando
    > end
    #+end_src

** Dica
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:CUSTOM_ID: breakpoint-commands-dica
:REVEAL_DATA_STATE: dica-slide
:END:

\\

Comandos de breakpoint e um arquivo =.gdbinit= local podem automatizar toda uma sessão de
debug

** Exemplo
:PROPERTIES:
:CUSTOM_ID: breakpoint-commands-example
:reveal_extra_attr: data-auto-animate
:END:

- O programa abaixo cria um array de 20 elementos e preenche o mesmo com valores aleatórios
  - Na maior parte do tempo ele funciona, mas as vezes ele da crash


#+begin_src c++
#include <ctime>
#include <stdexcept>
#include <iostream>

double computeInverse(double value) {
    if (value == 0) throw std::runtime_error("Value cannot be zero");
    return 1.0 / value;
}

int main() {
    srand(time(NULL));
    constexpr unsigned int arraySize = 20;
    int array[arraySize];

    for(unsigned int i = 0; i < arraySize; i++) {
        auto denominator = rand() % 200;
        array[i]         = computeInverse(denominator);
    }
    std::cout << "Fim" << std::endl;
    return 0;
}
#+end_src

** Exemplo
:PROPERTIES:
:CUSTOM_ID: breakpoint-commands-example2
:reveal_extra_attr: data-auto-animate
:END:

# :reveal_extra_attr: data-transition="fade"

#+ATTR_REVEAL: :frag (t)
- Para encontrar o bug, primeiro adicionamos um breakpoint na última instrução do programa

  #+begin_src gdb-script
  start
  b _exit
  #+end_src

- Verificamos o número do breakpoint com =i b=
- Supondo que o número do breakpoint em =_exit= é 2, use =gdb commands 2=
  - Agora escreva =run=, pressione {{{kbd(Enter)}}}, e escreva =end= para finalizar
  - Rode o programa com o comando =run=
  - Caso o programa termine sem atingir o bug ele chegará no breakpoint em
    =_exit= e será automaticamente reinicializado pelo comando =run= até que
    eventualmente o bug ocorra

** Exibindo uma expressão sempre que parar
:PROPERTIES:
:CUSTOM_ID: display-variables
:END:

#+ATTR_REVEAL: :frag (t)
- Para imprimir uma variável ou expressão sempre que parar em um breakpoint use
  #+begin_src gdb-script
  display expr
  #+end_src
  onde =expr= pode ser alguma expressão ou variável
- Para ver o que foi configurado use
  #+begin_src gdb-script
  info display
  #+end_src
- Para deletar uma expressão ou desabilitá-la use
  #+begin_src gdb-script
  delete display <NUM>
  disable/enable display <NUM>
  #+end_src

** Inserindo printfs sem recompilar
:PROPERTIES:
:CUSTOM_ID: dynamic-printfs
:END:

#+ATTR_REVEAL: :frag (t)
- Outro recurso interessante é adicionar printfs sem recompilar
  #+begin_src bash
  dprintf location, formatting-string, expr1, expr2, ...
  #+end_src
- Nesse caso o valor será impresso sempre que passar pela linha indicada

** Variáveis de Conveniência
:PROPERTIES:
:CUSTOM_ID: convenience-variables
:reveal_extra_attr: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (t)
- GDB permite salvar "variáveis de conveniência"
  #+ATTR_REVEAL: :frag (t)
  - Essas variáveis existem apenas no GDB e não afetam o programa em execução
  - Você pode usar para guardar qualquer coisa (valores, ponteiros, expressões, etc)
- Variáveis de conveniência são prefixadas com =$=
  - Qualquer nome precedido de =$= é válido (exceto se for igual a algum registrador)
  # - Também há "referências de histórico", que são números precedidos de =$=
- Para criar uma variável de conveniência usamos =set=
  #+begin_src text
  set $foo = *object_ptr
  #+end_src
- podemos ver seu valor como qualquer outra variável
  #+begin_src text
  print $foo
  #+end_src
- Para mostrar todas as variáveis de conveniência use
  #+begin_src text
  show convenience
  #+end_src

# ![:box moody, Dica]

** Dica
:PROPERTIES:
:CUSTOM_ID: convenience-variables-hint
:REVEAL_EXTRA_ATTR: data-auto-animate
:REVEAL_DATA_STATE: dica-slide
:END:

\\

Salve o ponteiro de um objeto em uma variável de conveniência. \\
Assim poderá acessá-lo de qualquer outro local. \\
(desde que o objeto ainda exista)

** Arrays Artificiais
:PROPERTIES:
:CUSTOM_ID: view-arrays
:reveal_extra_attr: data-auto-animate data-auto-animate-restart
:END:

#+ATTR_REVEAL: :frag (t)
- É possível imprimir o conteúdo de um array com

  #+begin_src gdb-script
  p *array@len
  #+end_src

- Funciona até mesmo para múltiplas dimensões (cuidado com a ordem)

  #+begin_src gdb-script
  p *array2d@num_cols@num_rows
  #+end_src
** Arrays Artificiais
:PROPERTIES:
:CUSTOM_ID: view-arrays-exemplo
:reveal_extra_attr: data-auto-animate
:END:


#+ATTR_REVEAL: :frag (t)
- As variáveis =a= e =m= podem ser impressas diretamente
- Mas =aPtr= e =mPtr= são apenas ponteiros
  - Podemos ver todos os elementos usando =@= e o tamanho

#+html: <div class="columns">
#+html: <div class="column w-50">
#+CAPTION: Exemplo
#+begin_src c++
int main() {
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int* aPtr = a;

    int m[4][3] = {{1, 2, 3}, //
                   {4, 5, 6}, //
                   {7, 8, 9}, //
                   {10, 11, 12}};
    int* mPtr = &m[0][0];

    return 0;
}
#+end_src

#+html: </div>
#+html: <div class="column w-50">
#+ATTR_REVEAL: :frag t
[[./images/print_arrays.png]]
#+html: </div>
#+html: </div>

** Ver um campo em um array de estruturas
:PROPERTIES:
:CUSTOM_ID: view-struct-arrays
:END:

#+ATTR_REVEAL: :frag (t)
- Considere um array de estruturas onde queremos ver apenas um campo
- Um truque interessante é usar uma variável de conveniência como contador
  #+begin_src gdb-script
  set $i = 0
  p mystruct_array[$i++]->some_field
  #+end_src
  #+ATTR_REVEAL: :frag t
  - {{{kbd(Enter)}}} no gdb repete o último comando
  - Basta pressionar {{{kbd(Enter)}}} repetidamente para ver os próximos elementos

- Também é possível usar a variável de conveniência dentro de um loop
  #+begin_src gdb-script
  set $i = 0
  while ($i < array_length)
      p mystruct_array[$i++]->some_field
  end
  #+end_src

** Usando com tipos do Armadillo                                          :noexport:
:PROPERTIES:
:CUSTOM_ID: vendo-tipos-do-armadillo
:END:


- Os tipos do armadillo possuem um ponteiro chamado =mem= que aponta para a
  região de memória onde os elementos são armazenados
- Vara visualizar um vetor use o código abaixo

#+begin_src gdb-script
p *myvec.mem@size
#+end_src

- Para matrizes use

#+begin_src gdb-script
p *mymat.mem@n_rows@n_cols
#+end_src

* Tipos de breakpoints
:PROPERTIES:
:CUSTOM_ID: tipos-de-breakpoint
:REVEAL_DATA_STATE: session-separation-slide
:END:

** Os 3 tipos de breakpoint
:PROPERTIES:
:CUSTOM_ID: tres-tipos-de-breakpoint
:END:

- Há três tipos de "breakpoint" no gdb:
  #+ATTR_REVEAL: :frag (t)
  - breakpoints :: Seu programa para quando um certo ponto é atingido
  - watchpoints (aka, data breakpoint) :: Seu programa para quando o valor de uma
    expressão muda
  - catchpoints :: Seu programa para quando um evento especial ocorre
    - disparo de uma exceção
    - quando uma biblioteca é carregada
    - etc


#+ATTR_HTML: :class fragment box moody
Breakpoints podem ter uma condição de parada


** Catchpoints
:PROPERTIES:
:CUSTOM_ID: break-in-exceptions
:END:

#+ATTR_REVEAL: :frag (t)
- Para parar seu programa quando uma exceção é disparada use
  #+begin_src gdb-script
  catch throw
  run
  #+end_src

- Nota: vai para em qualquer exceção disparada
- Dica: use =catch throw= como um comando que é rodado quando algum outro
  breakpoint for atingido para capturar apenas exceções disparadas depois dele


\\

#+ATTR_HTML: :class fragment box moody
Veja outros eventos de catch na documentação do gdb

** Watchpoints
:PROPERTIES:
:CUSTOM_ID: watchpoints
:END:

#+ATTR_REVEAL: :frag (t t t) :frag_idx (1 2 3)
- Exemplo de uso: pare quando uma variável =x= for alterada
  #+begin_src gdb-script
  watch x
  #+end_src

- Também é possível parar sempre que uma variável for lida com

  #+begin_src gdb-script
  rwatch x
  #+end_src

- Se quiser parar em ambos os casos use

  #+begin_src gdb-script
  awatch x
  #+end_src

\\

# ![:box happy, Dica]
#+ATTR_HTML: :class moody box fragment :data-fragment-index 4
Veja mais sobre breakpoints com =help breakpoints= no gdb


# {{{happybox(Veja mais sobre breakpoints com =help breakpoints= no gdb)}}}

  # ![:box moody, Nota](
# - Se passar a opção =-l= o gdb vai observar a região de memória resultante da expressão

* Python
:PROPERTIES:
:CUSTOM_ID: python
:REVEAL_DATA_STATE: session-separation-slide
:END:
** gdb + Python = 💘
:PROPERTIES:
:CUSTOM_ID: gdb-com-python
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (t)
- GDB possui um interpretador python integrado
- Para rodar um comando em python use =python comando=
- Ou inicialize um interpretador python com =python-interactive= ou apenas =pi=
- No python integrado a um módulo =gdb= que pode ser usado para interagir com o gdb
- Exemplo:
  # - "6 por meia dúzia": =python gdb.execute("some gdb command")=
  - Acessando uma variável no python:
    #+begin_src gdb-script
    python python_var = gdb.parse_and_eval("some_variable")
    #+end_src
- Use =python help('gdb')= para ver documentação do módulo =gdb=

- Exemplos (rode esses comandos no terminal do gdb)

  #+begin_src gdb-script
  python bp = gdb.Breakpoint('main.cpp:13')
  python bp.enable=False
  python bps = gdb.breakpoints()
  python var_i = gdb.parse_and_eval('i')
  #+end_src

** Quais os usos úteis dessa integração?
:PROPERTIES:
:CUSTOM_ID: gdb-com-python-question
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_HTML: :width 55%
[[./images/question.jpg]]


** Pretty Printers
:PROPERTIES:
:CUSTOM_ID: pretty-printers
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

# - Possivelmente a aplicação mais interessante de python com o gdb

#+ATTR_REVEAL: :frag (t)
- Podemos criar e registrar pretty printers para nossos tipos de interesse no C++
- Ensinamos ao gdb como representar um tipo C++ como string
- Suponha que você tenha um tipo chamado =mysctruct= contendo um campo =member=
- Podemos criar e registrar um pretty-printer para =mystruct= como abaixo

  #+begin_src python
  class MyPrinter(object):       # Classe que sabe converter nosso tipo em uma representação como string
      def __init__(self, val):   # 'val' é a representação no nosso objeto C++ no Python
          self.val = val
      def to_string(self):
          return (self.val['member'])

  import gdb.printing
  pp = gdb.printing.RegexpCollectionPrettyPrinter("my_library")  # Vamos usar para registrar nosso PP
  pp.add_printer("mystruct", "^mystruct$", MyPrinter)            # Registra nosso pretty-printer
  #+end_src

- Basta carregar o arquivo Python com o código acima no gdb com =source filename.py=




#+ATTR_HTML: :class fragment moody box
Não esqueça de colocar =set print pretty on= no seu arquivo =.gdbinit= global

** Pretty Printers
:PROPERTIES:
:CUSTOM_ID: pretty-printers2
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (t)
- O GDB já vem com pretty printers para os tipos da STL
- Ao imprimir um objeto do tipo =std::vector<myscruct>= vemos o efeito do pretty-printer para =std::vector=
  e para o tipo =mystruct=
- Exemplo: Visualizar uma matriz 6x3 de números complexos (usando a biblioteca [[http://arma.sourceforge.net/][armadillo]])

  #+html: <div class="columns">
  #+ATTR_REVEAL: :frag t
  [[./images/m2_without_pretty_printing.png]]

  #+ATTR_REVEAL: :frag t
  [[./images/m2_with_pretty_printint.png]]
  #+html: </div>

** XMethods
:PROPERTIES:
:CUSTOM_ID: xmethods
:END:

#+ATTR_REVEAL: :frag (t)
- Xmethods são métodos *adicionais* ou *substitutos* para métodos de uma classe em C++
  #+ATTR_REVEAL: :frag (t)
  - Útil para casos quando os métodos definidos no C++ não estejam disponíveis
    (inline, optimized-out, etc)
  - Podem ser usados mesmo quando debugando a partir de um core file
- Para implementar um xmethod é necessário criar um =matcher= e um =worker=
  - Mais de um =worker= pode ser implementado para um mesmo xmethod, cada um
    correspondendo a um overload diferente

\\

#+ATTR_HTML: :class moody box fragment
Veja mais na documentação do gdb

** Python Interativo
:PROPERTIES:
:CUSTOM_ID: python-interativo
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (t)
- O comando =pi= (ou =python-interactive=) roda o python de maneira iterativa
  - Especialmente útil para testes e para explorar a API
- Permite explorar o estado de um programa usando Python
- *Exemplo*: Gerar pontos uniformemente em um círculo
  #+begin_src c++
  std::vector<std::complex<double>> calcRandomPointsInsideCircle(unsigned int numPoints, double maxRadius) {
      std::default_random_engine generator;
      std::uniform_real_distribution<double> radiusDistribution(0.0, maxRadius);
      std::uniform_real_distribution<double> angleDistribution(0.0, 2 * M_PI);

      std::vector<std::complex<double>> points;
      points.reserve(numPoints);

      std::generate_n(std::back_inserter(points), numPoints, [&]() -> std::complex<double> {
          auto radius = radiusDistribution(generator);
          auto angle  = angleDistribution(generator);
          return radius * std::exp(std::complex<double>(0, -angle));
      });

      return points;
  }
  #+end_src

#+ATTR_HTML: :class fragment moody box
Como checar se os pontos gerados são uniformes durante o plot?



# - Adicione a linha abaixo no seu =.gdbinit= após clonar o repositório
#   =gdb_armadillo_helpers= para ter a função =get_arrat= disponível no python do gdb

#   #+begin_src gdb-script
#   source /path_onde_clonou/gdb_armadillo_helpers/gdb_helpers/gdb_armadillo_to_numpy.py
#   #+end_src

# - Agora rode o python iterativo com o comando =pi=
# - Supondo que você possui um =arma::cx_mat= de nome =m= você pode criar um numpy
#   array a partir dele com

#   #+begin_src python
#   >>> m_numpy = get_array(gdb.parse_and_eval('m'))
#   #+end_src


** Python Interativo
:PROPERTIES:
:CUSTOM_ID: python-interativo2
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

\\

Podemos visualizar os pontos gerados durante o debug ...

\\

#+ATTR_REVEAL: :frag t
usando matplotlib



** Python Interativo
:PROPERTIES:
:CUSTOM_ID: python-interativo3
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+ATTR_REVEAL: :frag (none t) :frag_idx (0 1)
- Para isso precisamos converter o vetor do =std::vector<std::complex<double>>= para um
  array do numpy
- Basta carregar o código abaixo no gdb para poder usar durante o python interativo
  #+begin_src python
  def _cast_to_complex(gdb_value):
      double_t = gdb.lookup_type('double')
      # We need to cast gdb_value into an array of two doubles. Then we can
      # access the real and imaginary parts as the first and second elements
      real_and_imag_parts = gdb_value.cast(double_t.array(1))
      return complex(real_and_imag_parts[0], real_and_imag_parts[1])

  def get_array_from(v):
      start_mem = v["_M_impl"]["_M_start"]
      finish_mem = v["_M_impl"]["_M_finish"]
      n_elem = finish_mem - start_mem
      return np.array([_cast_to_complex(start_mem[i]) for i in range(n_elem)])
  #+end_src


** Ambiente virtual para o Python do gdb
:PROPERTIES:
:CUSTOM_ID: ambiente-virtual
:REVEAL_DATA_STATE:
:END:
# https://interrupt.memfault.com/blog/using-pypi-packages-with-GDB

#+ATTR_REVEAL: :frag (t t t t) :frag_idx (1 2 3 4)
- O gdb usa o python do sistema
- Podemos querer usar alguma biblioteca Python dentro do gdb
- Inicializar o gdb a partir de um ambiente virtual não muda esse fato
- Solução:
  #+ATTR_REVEAL: :frag (strike t t) :frag_idx (5 5 6)
  - Instalar a biblioteca usando =sudo pip install=
  - Adicionar as pastas necessárias do path
  - Rode o comando abaixo no ambiente virtual

    #+begin_src bash
    python -c "import sys; print(sys.path)
    #+end_src
    e adicione as pastas no path do Python do gdb via =.gdbinit=

** Exemplo: Computar posições dos elementos de uma URA                    :noexport:
:PROPERTIES:
:CUSTOM_ID: exemplo1
:END:

  - Crie um arquivo =.gdbinit= na pasta contento o executável (chamado de =tests=)


#+begin_src gdb-script
  file tests
  set args "[Antenna]"
  start
  # Linha 311 é logo após a variável 'positions' ser setada
  b test_URA.cpp:311
  commands 2
    source plot_positions.py
  end
  run
#+end_src


  - Na mesma pasta crie o arquivo =plot_positions.py= com o conteúdo abaixo


#+begin_src python
  from matplotlib import pyplot as plt
  p = get_array(gdb.parse_and_eval("positions")) # positions é a variável no C++
  plt.plot(p[1], p[2], "*")
  for i in range(p.shape[1]):
      plt.text(p[1,i], p[2,i], i)
  plt.show()
#+end_src

** Exemplo útil: Computar posições dos elementos de uma URA               :noexport:
:PROPERTIES:
:CUSTOM_ID: exemplo2
:END:
- Agora basta rodar =gdb= e o programa vai parar na linha 311 e plotar as
  posições dos elementos de antenna


[[gdb_matplotlib.png]]

** IPython Interativo                                                     :noexport:
:PROPERTIES:
:CUSTOM_ID: ipython-interativo
:END:
- O python interativo do gdb funciona bem, mas não chega perto de um IPython
- Iniciar o IPython a partir do gdb não funciona (tab completion não funciona
  além de outros problemas
- **Workaround:** Inicializar um kernel embeded e conectar a partir de outro terminal
  1. Inicialize o python interativo com =pi=
  2. No python interativo rode o comando
     #+begin_src python
     import IPython; IPython.embed_kernel()
     #+end_src
  3. A partir de outro terminal rode o comando
     #+begin_src bash
     jupyter console --existing
     #+end_src
     - O =qtconsole= também funciona
  4. Use =exit()= no terminal conectado para desligar o kernel
     - O gdb volta para o python interativo comum


* Outras dicas                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: conteudo-extra
:REVEAL_DATA_STATE: session-separation-slide
:END:
** Alguns outros comandos úteis
:PROPERTIES:
:CUSTOM_ID: outras-dicas
:END:
- =whatis <variável>= diz o tipo da variável
- =ptype <variável>= mostra uma descrição do tipo da variável
- Use =skip= para não entrar em uma função
  - Ex: =foo(boring())= e você quer entrar em =foo=, mas não em =boring=
    - Use =skip boring= e depois =step= para entrar em foo sem entrar em boring
- Frame filters: Veja no cppsim
  - Veja tb: http://jefftrull.github.io/c++/gdb/python/2018/04/24/improved-backtrace.html
- =info locals=
- =info args=
- Use the =pgrep= command in the shell to get the pid of a process and then =gdb -p <PID>= to attach to it

** Examplo de uso: Debugando Segmentation Fault                           :noexport:
:PROPERTIES:
:CUSTOM_ID: debugando-segmentation-fault
:REVEAL_DATA_STATE:
:END:
- Quando gerar um core file, use o comando abaixo

#+begin_src bash
$ gdb -c core.xxxx
#+end_src

#+begin_src gdb-script
print $pc
#+end_src

- =x= -> comando para examinar a memória
- =x $= -> examina memória do resultado do último comando
- =bt= -> Mostra o backtrace

Se isso não resolver, rode o programa no gdb, dê =start= e rode o comando
=record=. Agora você pode usar o comando =reverse-stepi= para voltar um passo.

** Descobrindo quais funções do C++ podemos chamar no gdb                 :noexport:
:PROPERTIES:
:CUSTOM_ID: outras-dicas
:REVEAL_DATA_STATE:
:END:

- Não consegue chamar uma função do seu código quando parado no gdb?
  - Grepping the demangle symbols in the binary is a good way to know if the function
    you're trying to call is in teh binary


#+begin_src bash
nm -C your_binary | grep print_matrix
#+end_src

** Criando comandos customizados para o gdb
:PROPERTIES:
:CUSTOM_ID: criando-novos-comandos
:REVEAL_DATA_STATE:
:END:
https://interrupt.memfault.com/blog/automate-debugging-with-gdb-python-api

* Queremos um pouco mais                                                   :noexport:
:PROPERTIES:
:REVEAL_DATA_STATE: session-separation-slide
:END:
** akjshdas
:PROPERTIES:
:reveal_background: linear-gradient(to left, #910830, #521623)
:END:
** sdkjfhsdf

** dskjhfgsdf

* Perguntas?
:PROPERTIES:
:CUSTOM_ID: thats-all-folks
:REVEAL_DATA_STATE: the-end-slide
:END:
